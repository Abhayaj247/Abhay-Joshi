{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Featured Products"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Product 1"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Product 2"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Product 3"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Product 4"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Product 5"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Product 6"
    }
  ],
  "presets": [
    {
      "name": "Custom Product Grid"
    }
  ]
}
{% endschema %}

<div class="product-grid-section">
  <h2 class="section-title">{{ section.settings.title }}</h2>
  
  <div class="custom-product-grid">
    {% for i in (1..6) %}
      {% assign product_setting = "product_" | append: i %}
      {% assign product = all_products[section.settings[product_setting]] %}
      
      {% if product != blank %}
        <div class="grid-item" 
          data-product-handle="{{ product.handle }}"
          data-product-id="{{ product.id }}"
          data-product-title="{{ product.title | escape }}"
          data-product-price="{{ product.price | money_without_currency }}"
          data-product-url="{{ product.url }}">
          <div class="product-card">
            <div class="product-image-wrapper">
              {% if product.featured_image %}
                <img 
                  src="{{ product.featured_image | img_url: '600x600', crop: 'center' }}"
                  alt="{{ product.featured_image.alt | escape }}"
                  class="product-image"
                  loading="lazy"
                  width="600"
                  height="600">
              {% else %}
                {{ 'product-1' | placeholder_svg_tag: 'product-image placeholder' }}
              {% endif %}
              
              <button class="quick-view-button" aria-label="Quick view {{ product.title }}">
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M15 3h6v6M9 21H3v-6M21 3l-7 7M3 21l7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
            </div>
            
            <div class="product-info">
              <h3 class="product-title">{{ product.title }}</h3>
              <p class="product-price">{{ product.price | money }}</p>
            </div>
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

<!-- Quick View Modal -->
<div id="quick-view-modal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <div class="modal-product-details">
      <div class="product-image">
        <img id="modal-product-image" src="" alt="">
      </div>
      <div class="modal-details">
        <h2 id="modal-product-title" class="modal-product-title"></h2>
        <div id="modal-product-price" class="modal-product-price"></div>
        <div id="modal-product-description" class="modal-product-description"></div>
        
        <form id="add-to-cart-form" class="product-form">
          <input type="hidden" id="variant-id" name="id" value="">
          <div id="variant-options" class="variant-options"></div>
          
          <div class="quantity-selector">
            <label for="quantity">Quantity</label>
            <div class="quantity-wrapper">
              <button type="button" class="quantity-btn minus" aria-label="Decrease quantity">-</button>
              <input type="number" id="quantity" name="quantity" value="1" min="1" max="99">
              <button type="button" class="quantity-btn plus" aria-label="Increase quantity">+</button>
            </div>
          </div>
          
          <button type="submit" class="add-to-cart-button">ADD TO CART</button>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
  .custom-product-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    padding: 20px;
  }

  @media screen and (max-width: 768px) {
    .custom-product-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media screen and (max-width: 480px) {
    .custom-product-grid {
      grid-template-columns: 1fr;
    }
  }
  
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    z-index: 1000;
  }

  .modal-content {
    background: white;
    margin: 5% auto;
    padding: 20px;
    width: 90%;
    max-width: 800px;
    position: relative;
    border-radius: 8px;
  }

  .close {
    position: absolute;
    right: 20px;
    top: 20px;
    font-size: 24px;
    cursor: pointer;
  }

  .modal-product-details {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
  }

  .product-image img {
    width: 100%;
    height: auto;
  }

  .variant-options {
    margin: 20px 0;
  }

  .option-container {
    margin-bottom: 15px;
  }

  .option-container label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
  }

  .color-swatches {
    display: flex;
    gap: 10px;
  }

  .color-swatch {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid transparent;
  }

  .color-swatch.selected {
    border-color: #000;
  }

  select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }

  .add-to-cart-button {
    width: 100%;
    padding: 15px;
    background: #000;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    font-weight: 500;
    margin-top: 20px;
  }

  .add-to-cart-button:hover {
    opacity: 0.9;
  }

  .arrow {
    transition: transform 0.3s ease;
  }

  .add-to-cart-button:hover .arrow {
    transform: translateX(5px);
  }

  @media (max-width: 768px) {
    .modal-product-details {
      grid-template-columns: 1fr;
    }
    
    .modal-content {
      margin: 0;
      width: 100%;
      height: 100%;
      overflow-y: auto;
    }
  }
  
  .quantity-selector {
    margin-bottom: 20px;
  }

  .quantity-selector label {
    display: block;
    font-size: 14px;
    font-weight: 500;
    margin-bottom: 10px;
    color: #666;
  }

  .quantity-wrapper {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 6px;
    overflow: hidden;
    width: fit-content;
  }

  .quantity-btn {
    width: 40px;
    height: 40px;
    border: none;
    background: #f5f5f5;
    color: #333;
    font-size: 18px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
  }

  .quantity-btn:hover {
    background: #e5e5e5;
  }

  .quantity-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  #quantity {
    width: 60px;
    height: 40px;
    border: none;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
    text-align: center;
    font-size: 16px;
    font-weight: 500;
    -moz-appearance: textfield;
  }

  #quantity::-webkit-outer-spin-button,
  #quantity::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .cart-notification {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: #000;
    color: #fff;
    padding: 15px 25px;
    border-radius: 4px;
    z-index: 1000;
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style>

<script>
/**
 * Product Grid Management System
 * Handles product grid functionality including quick view, variant selection,
 * cart management, and quantity controls.
 */
(function() {
  'use strict';

  // Cache DOM elements
  const elements = {
    modal: document.getElementById('quick-view-modal'),
    closeBtn: document.querySelector('.close'),
    productItems: document.querySelectorAll('.grid-item'),
    addToCartForm: document.getElementById('add-to-cart-form'),
    quantityInput: document.getElementById('quantity'),
    minusBtn: document.querySelector('.quantity-btn.minus'),
    plusBtn: document.querySelector('.quantity-btn.plus')
  };

  // Configuration
  const config = {
    winterJacketHandle: 'soft-winter-jacket',
    maxQuantity: 99,
    minQuantity: 1,
    notificationDuration: 3000
  };

  /**
   * Initialize all event listeners
   */
  function initializeEventListeners() {
    // Modal close events
    elements.closeBtn.addEventListener('click', closeModal);
    window.addEventListener('click', handleOutsideClick);
    
    // Product grid events
    elements.productItems.forEach(item => {
      const quickViewBtn = item.querySelector('.quick-view-button');
      quickViewBtn.addEventListener('click', (e) => handleQuickView(e, item));
    });

    // Quantity control events
    elements.minusBtn.addEventListener('click', decreaseQuantity);
    elements.plusBtn.addEventListener('click', increaseQuantity);
    elements.quantityInput.addEventListener('change', validateQuantity);

    // Form submission
    elements.addToCartForm.addEventListener('submit', handleAddToCart);
  }

  /**
   * Handle quick view button click
   * @param {Event} e - Click event
   * @param {HTMLElement} item - Product grid item element
   */
  async function handleQuickView(e, item) {
    e.stopPropagation();
    const productHandle = item.dataset.productHandle;
    
    try {
      const product = await fetchProductData(productHandle);
      updateModalContent(product);
      openModal();
    } catch (error) {
      console.error('Error loading product data:', error);
      showNotification('Error loading product details', 'error');
    }
  }

  /**
   * Fetch product data from Shopify API
   * @param {string} handle - Product handle
   * @returns {Promise<Object>} Product data
   */
  async function fetchProductData(handle) {
    const response = await fetch(`/products/${handle}.js`);
    if (!response.ok) throw new Error('Product fetch failed');
    return response.json();
  }

  /**
   * Update modal content with product data
   * @param {Object} product - Product data
   */
  function updateModalContent(product) {
    // Update basic product information
    document.getElementById('modal-product-title').textContent = product.title;
    document.getElementById('modal-product-price').textContent = formatPrice(product.price);
    document.getElementById('modal-product-description').innerHTML = product.description;
    document.getElementById('modal-product-image').src = product.featured_image;

    // Store variants data for later use
    elements.addToCartForm.dataset.variants = JSON.stringify(product.variants);

    // Generate variant options
    generateVariantOptions(product.options_with_values);

    // Set default variant if available
    if (product.variants.length > 0) {
      setDefaultVariant(product.variants[0]);
    }
  }

  /**
   * Generate variant selection options
   * @param {Array} options - Product variant options
   */
  function generateVariantOptions(options) {
    const container = document.getElementById('variant-options');
    container.innerHTML = '';

    options.forEach((option, index) => {
      const optionContainer = createOptionContainer(option, index);
      container.appendChild(optionContainer);
    });
  }

  /**
   * Create option container for variant selection
   * @param {Object} option - Option data
   * @param {number} index - Option index
   * @returns {HTMLElement} Option container element
   */
  function createOptionContainer(option, index) {
    const container = document.createElement('div');
    container.className = 'option-container';

    const label = document.createElement('label');
    label.textContent = option.name;
    container.appendChild(label);

    if (option.name.toLowerCase() === 'color') {
      container.appendChild(createColorSwatches(option.values, index));
    } else {
      container.appendChild(createDropdown(option, index));
    }

    return container;
  }

  /**
   * Create color swatch elements
   * @param {Array} values - Color values
   * @param {number} optionIndex - Option index
   * @returns {HTMLElement} Swatch container
   */
  function createColorSwatches(values, optionIndex) {
    const swatchContainer = document.createElement('div');
    swatchContainer.className = 'color-swatches';
    
    values.forEach(value => {
      const swatch = document.createElement('div');
      swatch.className = 'color-swatch';
      swatch.setAttribute('data-value', value);
      swatch.style.backgroundColor = value.toLowerCase();
      swatch.onclick = () => {
        swatchContainer.querySelectorAll('.color-swatch')
          .forEach(s => s.classList.remove('selected'));
        swatch.classList.add('selected');
        updateVariantSelection(optionIndex, value);
      };
      swatchContainer.appendChild(swatch);
    });
    
    return swatchContainer;
  }

  /**
   * Create dropdown select element
   * @param {Object} option - Option data
   * @param {number} optionIndex - Option index
   * @returns {HTMLElement} Select element
   */
  function createDropdown(option, optionIndex) {
    const select = document.createElement('select');
    select.name = `option${optionIndex + 1}`;
    select.required = true;
    select.onchange = (e) => updateVariantSelection(optionIndex, e.target.value);
    
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = `Select ${option.name}`;
    select.appendChild(defaultOption);
    
    option.values.forEach(value => {
      const optionEl = document.createElement('option');
      optionEl.value = value;
      optionEl.textContent = value;
      select.appendChild(optionEl);
    });
    
    return select;
  }

  /**
   * Set default variant and update UI
   * @param {Object} variant - Default variant data
   */
  function setDefaultVariant(variant) {
    document.getElementById('variant-id').value = variant.id;
    document.getElementById('modal-product-price').textContent = formatPrice(variant.price);
    updateAddToCartButton(variant.available);
  }

  /**
   * Update variant selection and price
   * @param {number} optionIndex - Index of changed option
   * @param {string} value - Selected value
   */
  function updateVariantSelection(optionIndex, value) {
    const variants = JSON.parse(elements.addToCartForm.dataset.variants);
    const selects = elements.addToCartForm.querySelectorAll('select');
    const selectedOptions = Array.from(selects).map(select => select.value);
    selectedOptions[optionIndex] = value;
    
    const matchingVariant = findMatchingVariant(variants, selectedOptions);
    if (matchingVariant) {
      updateVariantUI(matchingVariant);
    }
  }

  /**
   * Find matching variant based on selected options
   * @param {Array} variants - Available variants
   * @param {Array} selectedOptions - Currently selected options
   * @returns {Object|null} Matching variant or null
   */
  function findMatchingVariant(variants, selectedOptions) {
    return variants.find(variant => 
      variant.options.every((option, index) => 
        option === selectedOptions[index] || !selectedOptions[index]
      )
    );
  }

  /**
   * Update UI elements for selected variant
   * @param {Object} variant - Selected variant data
   */
  function updateVariantUI(variant) {
    document.getElementById('variant-id').value = variant.id;
    document.getElementById('modal-product-price').textContent = formatPrice(variant.price);
    updateAddToCartButton(variant.available);
  }

  /**
   * Update add to cart button state
   * @param {boolean} available - Whether variant is available
   */
  function updateAddToCartButton(available) {
    const button = elements.addToCartForm.querySelector('.add-to-cart-button');
    button.disabled = !available;
    button.textContent = available ? 'ADD TO CART' : 'SOLD OUT';
  }

  /**
   * Handle quantity changes
   */
  function decreaseQuantity() {
    const currentValue = parseInt(elements.quantityInput.value);
    if (currentValue > config.minQuantity) {
      elements.quantityInput.value = currentValue - 1;
      updateQuantityButtons();
    }
  }

  function increaseQuantity() {
    const currentValue = parseInt(elements.quantityInput.value);
    if (currentValue < config.maxQuantity) {
      elements.quantityInput.value = currentValue + 1;
      updateQuantityButtons();
    }
  }

  function validateQuantity() {
    let value = parseInt(elements.quantityInput.value);
    if (isNaN(value) || value < config.minQuantity) value = config.minQuantity;
    if (value > config.maxQuantity) value = config.maxQuantity;
    elements.quantityInput.value = value;
    updateQuantityButtons();
  }

  /**
   * Handle add to cart submission
   * @param {Event} e - Submit event
   */
  async function handleAddToCart(e) {
    e.preventDefault();
    
    const formData = new FormData(elements.addToCartForm);
    const variantId = formData.get('id');
    const quantity = parseInt(formData.get('quantity'));
    
    if (!variantId) {
      showNotification('Please select all options before adding to cart', 'error');
      return;
    }
    
    try {
      const result = await addItemToCart(variantId, quantity);
      await handleWinterJacketLogic(result, quantity);
      
      closeModal();
      await refreshCart();
      showNotification('Item added to cart successfully!', 'success');
    } catch (error) {
      console.error('Error adding to cart:', error);
      showNotification('Error adding item to cart', 'error');
    }
  }

  /**
   * Add item to cart
   * @param {string} variantId - Variant ID
   * @param {number} quantity - Quantity to add
   * @returns {Promise<Object>} Cart addition result
   */
  async function addItemToCart(variantId, quantity) {
    const response = await fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        items: [{
          id: variantId,
          quantity: quantity
        }]
      })
    });

    if (!response.ok) throw new Error('Failed to add item to cart');
    return response.json();
  }

  /**
   * Handle winter jacket auto-add logic
   * @param {Object} result - Cart addition result
   * @param {number} quantity - Quantity to match
   */
  async function handleWinterJacketLogic(result, quantity) {
    const selectedVariant = result.items[0];
    if (selectedVariant.variant_options.includes('Black') && 
        selectedVariant.variant_options.includes('Medium')) {
      
      const winterJacket = await fetchProductData(config.winterJacketHandle);
      await addItemToCart(winterJacket.variants[0].id, quantity);
    }
  }

  /**
   * Utility Functions
   */
  function formatPrice(cents) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(cents/100);
  }

  function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `cart-notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, config.notificationDuration);
  }

  function updateQuantityButtons() {
    const currentValue = parseInt(elements.quantityInput.value);
    elements.minusBtn.disabled = currentValue <= config.minQuantity;
    elements.plusBtn.disabled = currentValue >= config.maxQuantity;
  }

  function openModal() {
    elements.modal.style.display = 'block';
    document.body.style.overflow = 'hidden';
  }

  function closeModal() {
    elements.modal.style.display = 'none';
    document.body.style.overflow = '';
  }

  function handleOutsideClick(e) {
    if (e.target === elements.modal) {
      closeModal();
    }
  }

  /**
   * Refresh cart contents and update UI
   */
  async function refreshCart() {
    try {
      const response = await fetch('/cart.js');
      if (!response.ok) throw new Error('Failed to fetch cart');
      const cart = await response.json();
      
      // Update cart count
      const cartCount = document.querySelector('.cart-count');
      if (cartCount) {
        cartCount.textContent = cart.item_count;
        cartCount.classList.add('updated');
        setTimeout(() => cartCount.classList.remove('updated'), 1000);
      }
      
      // Open cart drawer if it exists
      const cartDrawer = document.querySelector('.cart-drawer-trigger');
      if (cartDrawer) cartDrawer.click();
      
    } catch (error) {
      console.error('Error refreshing cart:', error);
      showNotification('Error updating cart display', 'error');
    }
  }

  // Initialize the module when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeEventListeners);
  } else {
    initializeEventListeners();
  }
})();
</script>